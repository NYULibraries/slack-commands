# Aliases
docker-defaults: &docker-defaults
  docker:
    - image: nyulibraries/circleci_docker:18.06.1-dc-1.22.0-1
  working_directory: ~/app

auth_docker: &auth_docker
  run:
    name: Docker login
    command: docker login -u "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"

pull: &pull
  run:
    name: Pull docker images
    command: ./scripts/pull_docker.sh

push: &push
  run:
    name: Push docker images
    command: ./scripts/push_docker.sh

build: &build
  run:
    name: Build images
    command: docker-compose build test

test: &test
  run:
    name: Test
    command: docker-compose run test

check-awsdev-not-disabled: &check-awsdev-not-disabled
  run:
    name: Check if development deploy is disabled
    command: |
      if [ $DISABLE_AWSDEV == true ]
      then
        echo "Deployment to AWS development account has been disabled with the current environment configuration (DISABLE_AWSDEV == true)"
        circleci step halt
      fi

check-awsprod-not-disabled: &check-awsprod-not-disabled
  run:
    name: Check if production deploy is disabled
    command: |
      if [ $DISABLE_AWSPROD == true ]
      then
        echo "Deployment to AWS development account has been disabled with the current environment configuration (DISABLE_AWSPROD == true)"
        circleci step halt
      fi

set-env-stage-dev: &set-env-stage-dev
  run:
    name: Use development stage environment variables in awsdev account
    command: |
      echo 'export STAGE="dev"' >> $BASH_ENV
      echo 'export REST_API_ID="$REST_API_ID_DEV"' >> $BASH_ENV
      echo 'export REST_API_ROOT_RESOURCE_ID="$REST_API_ROOT_RESOURCE_ID_DEV"' >> $BASH_ENV


set-env-stage-prod: &set-env-stage-prod
  run:
    name: Use production stage environment variables in awsprod account
    command: |
      echo 'export STAGE="prod"' >> $BASH_ENV
      echo 'export REST_API_ID="$REST_API_ID_PROD"' >> $BASH_ENV
      echo 'export REST_API_ROOT_RESOURCE_ID="$REST_API_ROOT_RESOURCE_ID_PROD"' >> $BASH_ENV

aws-deploy: &aws-deploy
  run:
    name: Deploy via serverless to AWS account
    command: docker-compose run deploy

version: 2
jobs:
  deploy-staging-awsdev:
    <<: *docker-defaults
    steps:
      - <<: *check-awsdev-not-disabled
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-env-stage-dev
      - <<: *aws-deploy

  deploy-staging-awsprod:
    <<: *docker-defaults
    steps:
      - <<: *check-awsprod-not-disabled
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-env-stage-dev
      - <<: *aws-deploy

  deploy-production-awsdev:
    <<: *docker-defaults
    steps:
      - <<: *check-awsdev-not-disabled
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-env-stage-prod
      - <<: *aws-deploy

  deploy-production-awsprod:
    <<: *docker-defaults
    steps:
      - <<: *check-awsprod-not-disabled
      - checkout
      - setup_remote_docker
      - <<: *auth_docker
      - <<: *pull
      - <<: *build
      - <<: *push
      - <<: *test
      - <<: *set-env-stage-prod
      - <<: *aws-deploy

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - deploy-staging-awsdev:
          context: web-lambdas-aws-nyulitsdev
          filters:
            branches:
              ignore: master
      - deploy-staging-awsprod:
          context: web-lambdas-aws-nyulits
          filters:
            branches:
              ignore: master
      - deploy-production-awsdev:
          context: web-lambdas-aws-nyulitsdev
          filters:
            branches:
              only: master
      - deploy-production-awsprod:
          context: web-lambdas-aws-nyulits
          filters:
            branches:
              only: master
